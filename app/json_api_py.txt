# ==== JSON API =====
# source: https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask                         
#auth = HTTPBasicAuth()
#@auth.get_password
#def get_password(username):
#    if username == 'pi':
#        return 'almafa1234'
#    return None

#@auth.error_handler
#def unauthorized():
#    return make_response(jsonify( { 'error': 'Unauthorized access' } ), 403)
#    # return 403 instead of 401 to prevent browsers from displaying the default auth dialog
    
@app.errorhandler(400)
def not_found(error):
    return make_response(jsonify( { 'error': 'Bad request' } ), 400)

@app.errorhandler(404)
def not_found(error):
    return make_response(jsonify( { 'error': 'Not found' } ), 404)

    
@app.route('/lenses/api/v1.0/lenses', methods = ['GET'])
#@auth.login_required
def get_lens_list():
   lens_list, lastupdate = get_lenses()
   return jsonify( { 'lenses': lens_list } )
    #return jsonify( { 'tasks': map(make_public_task, tasks) } )

@app.route('/lenses/api/v1.0/lenses/<int:lens_id>', methods = ['GET'])
#@auth.login_required
def get_lens(lens_id):
    lenses, lastupdate = get_lenses()
    try:
        lens = lenses[lens_id]
    except IndexError:
        abort(404)
    if len(lens) == 0:
        abort(404)
    # task = filter(lambda t: t['id'] == task_id, tasks)
    return jsonify( { 'lens': make_public_task(lens) } )

# @app.route('/todo/api/v1.0/tasks', methods = ['POST'])
# #@auth.login_required
# def create_task():
    # if not request.json or not 'title' in request.json:
        # abort(400)
    # task = {
        # 'id': tasks[-1]['id'] + 1,
        # 'title': request.json['title'],
        # 'description': request.json.get('description', ""),
        # 'done': False
    # }
    # tasks.append(task)
    # return jsonify( { 'task': make_public_task(task) } ), 201

    

# @app.route('/todo/api/v1.0/tasks/<int:task_id>', methods = ['PUT'])
# #@auth.login_required
# def update_task(task_id):
    # task = filter(lambda t: t['id'] == task_id, tasks)
    # if len(task) == 0:
        # abort(404)
    # if not request.json:
        # abort(400)
    # if 'title' in request.json and type(request.json['title']) != unicode:
        # abort(400)
    # if 'description' in request.json and type(request.json['description']) is not unicode:
        # abort(400)
    # if 'done' in request.json and type(request.json['done']) is not bool:
        # abort(400)
    # task[0]['title'] = request.json.get('title', task[0]['title'])
    # task[0]['description'] = request.json.get('description', task[0]['description'])
    # task[0]['done'] = request.json.get('done', task[0]['done'])
    # return jsonify( { 'task': make_public_task(task[0]) } )
    
# @app.route('/todo/api/v1.0/tasks/<int:task_id>', methods = ['DELETE'])
# #@auth.login_required
# def delete_task(task_id):
    # task = filter(lambda t: t['id'] == task_id, tasks)
    # if len(task) == 0:
        # abort(404)
    # tasks.remove(task[0])
    # return jsonify( { 'result': True } )